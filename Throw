package Craps;

import java.text.MessageFormat;
import java.util.Collection;
import java.util.Set;
import java.util.TreeSet;


/**
*
* @author Jordan Damron & Sally Holmes
*
*/
public class Throw {
	
	Set<Outcome> outcomes;
	Set<Outcome> winners;				//Set of winning one-roll propositions
	Set<Outcome> losers;				//Set of losing one-roll propositions
	Set<Outcome> win1roll;		
	Set<Outcome> lose1roll;
	Set<Outcome> winHardway;
	Set<Outcome> loseHardway;
	private int d1, d2;				//The two dice values
	private NumberPair pair;

	/**
	 * <b>Throw</b> 
	 * Basic constructor for Throw object with d1, and d2 
	 * dice values
	 * @param d1 the value to be initialized to this d1
	 * @param d2 the value to be initialized to this d2
	 */
	public Throw(int d1, int d2) 
	{
		this.d1 = d1;
		this.d2 = d2;
		
		pair = getKey();
		
		outcomes = new TreeSet<Outcome>();
		winners = new TreeSet<Outcome>();
		losers = new TreeSet<Outcome>();
		win1roll = new TreeSet<Outcome>();
		lose1roll = new TreeSet<Outcome>();
		winHardway = new TreeSet<Outcome>();
		loseHardway = new TreeSet<Outcome>();
	}
	
	/**
	 * <b>Throw</b>
	 * Constructor for Throw with a parameterized set of outcomes
	 * in addition to d1, and d2 
	 * @param d1 the value to be initialized to this d1
	 * @param d2 the value to be initialized to this d2
	 * @param outcomes the set of outcomes to be initialized to this outcomes
	 */
	public Throw(int d1, int d2, Collection<? extends Outcome> outcome) 
	{
		this(d1, d2);
		
		this.outcomes = new TreeSet<Outcome>();
		this.outcomes.addAll(outcome);
	
		this.winners = new TreeSet<Outcome>();
		this.losers = new TreeSet<Outcome>();
		this.win1roll = new TreeSet<Outcome>();
		this.lose1roll = new TreeSet<Outcome>();
		this.winHardway = new TreeSet<Outcome>();
		this.loseHardway = new TreeSet<Outcome>();
	}
	
	/**
	 * <b>Throw</b>
	 * Generic constructor for creating this throw with an array of outcomes
	 * @param d1 the value to be initialized to d1
	 * @param d2 the value to be initialized to d2
	 * @param array the array of outcomes
	 */
	public Throw(int d1, int d2, Outcome[] array)
	{
		this(d1, d2);	
		
		for(int i = 0; i < array.length; i++)
		{
			outcomes.add(array[i]);				
		}
	}
	
	/**
	 * <b>Throw</b>
	 * Creates this throw, and then associates two given sets of outcomes (winners and losers)
	 * with winning and losing one roll propositions
	 * @param d1 the value to be initialized to d1
	 * @param d2
	 * @param winners
	 * @param losers
	 */
	public Throw(int d1, int d2, Collection<? extends Outcome> winners, Collection<? extends Outcome> losers)
	{
		this(d1, d2);
		
		this.winners = new TreeSet<Outcome>();
		this.winners.addAll(winners);
		
		this.losers = new TreeSet<Outcome>();
		this.losers.addAll(losers);
		
	}
	
	/**
	 * <b>add</b>
	 * This method adds an outcome to this Throw object
	 * @param outcome the outcome to be added to the Bin
	 */
	public void add(Outcome outcome)
	{
		
		if(!outcomes.contains(outcome))
		{
			outcomes.add(outcome);
		}
		
	}
	
	/**
	 * <b>add1Roll</b>
	 * Adds the relevant outcomes to winners and losers sets 
	 * @param winners the set to have outcomes added for winning rolls
	 * @param losers the set to have outcomes added for losing rolls
	 */
	public void add1Roll(Collection<? extends Outcome> winners, Collection<? extends Outcome> losers)
	{
		
	}
	
	/**
	 * <b>addHardways</b>
	 * Adds outcomes to the Hardways winners and losers sets
	 * @param winners 
	 * @param losers
	 */
	public void addHardways(Collection<? extends Outcome> winners, Collection<? extends Outcome> losers)
	{
		
	}
	
	/**
	 * <b>getKey</b>
	 * Returns the NumberPair object that is a key for this Throw
	 * @return the NumberPair that is a key for this Throw
	 */
	public NumberPair getKey()
	{
		pair = new NumberPair(this.d1, this.d2);

		return pair;
	}
	
	/**
	 * 
	 * @param thrown
	 * @return
	 */
	public Outcome getOutcome(Throw thrown)
	{
		return thrown.getOutcome(thrown);
	}
	
	/**
	 * <b>hard</b>
	 * Determines if the two dice rolls are the same (helps in determining
	 * if hardways bets have been won/lost)
	 * @return true if d1 is equal to d2, false if otherwise
	 */
	public boolean hard()
	{
		if( d1 == d2)
		{
			return true;
		}
		else
		{
			return false;
		}
	}
	
	/**
	 * <b>updateGame</b>
	 * Updates the game state of CrapsGame game based on this Throw
	 * @param game the game state to be changed
	 */
	public void updateGame(CrapsGame game)
	{
		if(//condition)
		{
			game.craps();
		}
		else if(//condition)
		{
			game.natural();
		}
		else if(//condition)
		{
			game.eleven();
		}
		else if(//condition)
		{
			game.point();
		}
	}
	
	/**
	 * <b>toString</b>
	 * Returns a String using a specified format
	 */
	public String toString()
	{
		
		Object[] values= { outcomes };	
		String msgTempl= "{0}";
		return MessageFormat.format( msgTempl, values );
		
	}
}
